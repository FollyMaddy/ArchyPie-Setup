diff --git a/neo/idlib/Lib.cpp b/neo/idlib/Lib.cpp
index 0976c85e2..a9f0b6491 100644
--- a/neo/idlib/Lib.cpp
+++ b/neo/idlib/Lib.cpp
@@ -298,7 +298,7 @@ RESULTS
    Reverses the byte order in each of elcount elements.
 ===================================================================== */
 ID_INLINE static void RevBytesSwap( void *bp, int elsize, int elcount ) {
-	register unsigned char *p, *q;
+	unsigned char *p, *q;
 
 	p = ( unsigned char * ) bp;
 
diff --git a/neo/idlib/hashing/MD5.cpp b/neo/idlib/hashing/MD5.cpp
index de9f855d1..f4f983683 100644
--- a/neo/idlib/hashing/MD5.cpp
+++ b/neo/idlib/hashing/MD5.cpp
@@ -54,7 +54,7 @@ the data and converts bytes into longwords for this routine.
 =================
 */
 void MD5_Transform( unsigned int state[4], unsigned int in[16] ) {
-	register unsigned int a, b, c, d;
+	unsigned int a, b, c, d;
 
 	a = state[0];
 	b = state[1];
diff --git a/neo/idlib/math/Simd_Generic.cpp b/neo/idlib/math/Simd_Generic.cpp
index c20f6a4d6..9ce25f6d7 100644
--- a/neo/idlib/math/Simd_Generic.cpp
+++ b/neo/idlib/math/Simd_Generic.cpp
@@ -1802,7 +1802,7 @@ void VPCALL idSIMD_Generic::MatX_LowerTriangularSolve( const idMatX &L, float *x
 	lptr = L[skip];
 
 	int i, j;
-	register double s0, s1, s2, s3;
+	double s0, s1, s2, s3;
 
 	for ( i = skip; i < n; i++ ) {
 		s0 = lptr[0] * x[0];
@@ -1928,7 +1928,7 @@ void VPCALL idSIMD_Generic::MatX_LowerTriangularSolveTranspose( const idMatX &L,
 	}
 
 	int i, j;
-	register double s0, s1, s2, s3;
+	double s0, s1, s2, s3;
 	float *xptr;
 
 	lptr = L.ToFloatPtr() + n * nc + n - 4;
diff --git a/neo/tools/compilers/roqvq/codec.cpp b/neo/tools/compilers/roqvq/codec.cpp
index a195ecce9..5d7f920a2 100644
--- a/neo/tools/compilers/roqvq/codec.cpp
+++ b/neo/tools/compilers/roqvq/codec.cpp
@@ -751,7 +751,7 @@ void codec::IRGBtab(void)
 float codec::Snr( byte *old, byte *bnew, int size ) {
 int i, j;
 float fsnr;
-register int ind;
+int ind;
 
 	ind = 0;
